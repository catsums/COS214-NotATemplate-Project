For doxygen to parse a comment you must use 
///  -> THREE slashes instead of two 
/** -> DOUBLE astriks instead of one 

The above 2 syntaxes must be placed just above an entity so that the Doxygen parser can associate the comments to that particular entity.

What is an entity in Doxygen? An entity can be a global variable, a structure declaration, enum declaration or a function.

Example: 

#include <stdio.h>
 
/// This is a test string  -------------------------> Above global variable 
char * hello = "Hello Embedded Inventors!";
 
/**      ----------------------------------> Above main function 
 * This is the main function
 * 
*/
int main()
{
    printf("%s \n", hello);
    return 0;
}

*************************************************************************************************************************
@brief 
Gives a brief description of what you are trying to do. Preferable placed at the top of your function.

Example:

The @brief is IN the comment

#ifndef MYCLASS_HH
#define MYCLASS_HH

/** @brief Dummy class used for illustration purposes. Doing something with it.
    Detailed description follows here.
    @author X. XYZ, DESY
    @date March 2008
    */
class myClass{
    /** Default constructor. Does something.
        */
    myClass();
    /** My constructor. Initializes the coordinates.
        */
    myClass(float x, float y, float z);
    /** Default destructor.
        */
    ~myClass();

**************************************************************************************************************************
@param

This is a parameter tag describes what your parameters are doing and what they are used for. Always add WITHIN a comment 

Example:

/** My function doing something...
    @param param1 first parameter
    @param param2 second parameter
    @return value return value
*/
float myFunction(float param1, float param2){
....
}

More:

  public:
    /**Print out the private members of the class
        */
    void print();
    /**Calculate distance from origin.
       The distance is calculated with the formula
        \f$\sqrt{(x-x0)^2+(y-y0)^2+(z-z0)^2}\f$.
        @param x - x coordinate of the point
        @param y - y coordinate of the point
        @param z - z coordinate of the point
        @return distance to point -------------------------> if you want <3
        */
    float getDistance(float x, float y, float z);

*************************************************************************************************************************
Member variables, these are placed in your h files where you have to explain or show what your variables mean. 
Shown like this -> int var; /**< Detailed description after the member */

Example: 

  private:
    float _x0;/**<initial x-coordinate*/
    float _y0;/**<initial y-coordinate*/
    float _z0;/**<initial z-coordinate*/


 REMEMBER within comment and dont forget to put an EXTRA asteriks in the beginning, only difference with explaining member variables is that it has a "<" (less than) symbol. before explaining what it is. 

